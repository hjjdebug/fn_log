#pragma once
#ifndef FN_LOG_MAX_CHANNEL_SIZE
#define FN_LOG_MAX_CHANNEL_SIZE 2
#endif
#ifndef FN_LOG_MAX_LOG_SIZE
#define FN_LOG_MAX_LOG_SIZE 10000
#endif
#ifndef FN_LOG_MAX_LOG_QUEUE_SIZE //the size need big than push log thread count
#define FN_LOG_MAX_LOG_QUEUE_SIZE 1000
#endif
#ifndef FN_LOG_HOTUPDATE_INTERVEL
#define FN_LOG_HOTUPDATE_INTERVEL 5
#endif
namespace FNLog
{
	enum LogPriority
	{
		PRIORITY_TRACE = 0,
		PRIORITY_DEBUG,
		PRIORITY_INFO,
		PRIORITY_WARN,
		PRIORITY_ERROR,
		PRIORITY_ALARM,
		PRIORITY_FATAL,
		PRIORITY_MAX
	};
	enum LogPrefix
	{
		LOG_PREFIX_NULL = 0x0,
		LOG_PREFIX_TIMESTAMP = 0x1,
		LOG_PREFIX_PRIORITY = 0x2,
		LOG_PREFIX_THREAD = 0x4,
		LOG_PREFIX_NAME = 0x8,
		LOG_PREFIX_DESC = 0x10,
		LOG_PREFIX_FILE = 0x20,
		LOG_PREFIX_FUNCTION = 0x40,
		LOG_PREFIX_ALL = 0xff,
		//LOG_PREFIX_DEFAULT = LOG_PREFIX_ALL,
		LOG_PREFIX_DEFAULT = LOG_PREFIX_TIMESTAMP | LOG_PREFIX_PRIORITY | LOG_PREFIX_FILE | LOG_PREFIX_FUNCTION,
	};
	enum LogType
	{
		LOG_TYPE_NULL,
		LOG_TYPE_MAX,
	};
	enum LogState
	{
		MARK_INVALID,
		MARK_HOLD,
		MARK_READY
	};
	enum DeviceOutType
	{ //device out_type 类型
		DEVICE_OUT_NULL,
		DEVICE_OUT_SCREEN,
		DEVICE_OUT_FILE,
		DEVICE_OUT_UDP,
		DEVICE_OUT_VIRTUAL,
	};
	enum DeviceConfigEnum
	{	//Device 的配置项，其值用device.config_fields_[]来保存
		DEVICE_CFG_ABLE, 
		DEVICE_CFG_PRIORITY,  
		DEVICE_CFG_CATEGORY,  
		DEVICE_CFG_CATEGORY_EXTEND, 
		DEVICE_CFG_CATEGORY_FILTER,
		DEVICE_CFG_IDENTIFY,
		DEVICE_CFG_IDENTIFY_EXTEND,
		DEVICE_CFG_IDENTIFY_FILTER,
		DEVICE_CFG_FILE_LIMIT_SIZE, 
		DEVICE_CFG_FILE_ROLLBACK,
		DEVICE_CFG_FILE_STUFF_UP,
		DEVICE_CFG_UDP_IP,
		DEVICE_CFG_UDP_PORT,
		DEVICE_CFG_MAX_ID
	};
	enum DeviceLogEnum
	{
		DEVICE_LOG_CUR_FILE_SIZE, 
		DEVICE_LOG_CUR_FILE_CREATE_TIMESTAMP,  
		DEVICE_LOG_CUR_FILE_CREATE_DAY, 
		DEVICE_LOG_LAST_TRY_CREATE_TIMESTAMP,
		DEVICE_LOG_LAST_TRY_CREATE_ERROR,
		DEVICE_LOG_TOTAL_WRITE_LINE,
		DEVICE_LOG_TOTAL_WRITE_BYTE,  
		DEVICE_LOG_MAX_ID
	};
	enum ChannelType
	{
		CHANNEL_ASYNC,
		CHANNEL_SYNC,
	};
	enum ChannelConfigEnum
	{
		CHANNEL_CFG_PRIORITY, 
		CHANNEL_CFG_CATEGORY,  
		CHANNEL_CFG_CATEGORY_EXTEND, 
		CHANNEL_CFG_CATEGORY_FILTER,
		CHANNEL_CFG_IDENTIFY,
		CHANNEL_CFG_IDENTIFY_EXTEND,
		CHANNEL_CFG_IDENTIFY_FILTER,
		CHANNEL_CFG_MAX_ID
	};
	enum ChannelLogEnum
	{
		CHANNEL_LOG_HOLD,
		CHANNEL_LOG_PUSH,
		CHANNEL_LOG_PROCESSED = CHANNEL_LOG_PUSH + 8,
		CHANNEL_LOG_MAX_ID
	};
	enum ChannelState
	{
		CHANNEL_STATE_NULL = 0,
		CHANNEL_STATE_RUNNING,
		CHANNEL_STATE_WAITING_FINISH,
		CHANNEL_STATE_FINISH,
	};
	enum LoggerState
	{
		LOGGER_STATE_UNINIT = 0,
		LOGGER_STATE_INITING,
		LOGGER_STATE_RUNNING,
		LOGGER_STATE_CLOSING,
	};
}
